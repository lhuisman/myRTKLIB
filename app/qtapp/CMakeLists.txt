# CMake file for the QT GUI apps
set(CMAKE_AUTOMOC TRUE)
set(CMAKE_AUTOUIC TRUE)
set(CMAKE_AUTORCC TRUE)

# set output dir
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

include_directories(
	${PROJECT_SOURCE_DIR}/src
	appcmn_qt
	widgets_qt
)

#
# Finding Qt
#
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)

find_package(Qt${QT_VERSION_MAJOR} NO_MODULE REQUIRED COMPONENTS Gui Widgets Concurrent Xml SerialPort)
find_package(
    Qt${QT_VERSION_MAJOR} NO_MODULE QUIET
    OPTIONAL_COMPONENTS
    WebEngineWidgets
    WebKitWidgets
)
if(${QT_VERSION_MAJOR} EQUAL 6)
   qt_standard_project_setup()
endif()

if(${QtWebEngineWidgets_FOUND})
   add_definitions(-DQWEBENGINE)
endif()

if(${QtWebKitWidgets_FOUND})
	add_definitions(-DQWEBKIT)
endif()

if(QT_VERSION_MAJOR GREATER_EQUAL 6)
    set(CMAKE_CXX_STANDARD 17)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)

    if(MSVC)
        add_compile_options(/Zc:__cplusplus)
    endif()
    if(MINGW)
        # prevent 'file too big' and 'too many sections' errors with Qt6
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wa,-mbig-obj")
    endif()
endif()

if(WIN32)
	add_definitions(-DWIN32)
endif()

add_subdirectory(rtkconv_qt)
add_subdirectory(rtkget_qt)
add_subdirectory(rtklaunch_qt)
add_subdirectory(rtknavi_qt)
add_subdirectory(rtkplot_qt)
add_subdirectory(rtkpost_qt)
add_subdirectory(srctblbrows_qt)
add_subdirectory(strsvr_qt)

if(IERS_MODEL)
   target_link_libraries(-liers -lgfortran)
endif()
